typeof(d)
mt cars
mtcars
data <-mtcars
View(data)
max(data$MPG)
max(data)
x <- list (1:3,"a",c(TRUE,FALSE,TRUE),c(2.3,5.9))
x
x[[1]][1]
x[[1]][2
x[[1]][2]
x[[1]][2]
x[[2]][2]
x[[2]][1]
download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
data <- download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
data <- download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
x <- list (1:3,"a",c(TRUE,FALSE,TRUE),c(2.3,5.9))
str(x)
dim(x)
is.recursive(x)
x <- mtcars
is.list(mtcars)
help("datasets")
library(help="datasets")
mod <- lm(mpg ~ wt, data=x)
mod
is.list(mod)
x <- c("a","b","b","a")
x
typeof(x)
x <- factor(x)
typeof(x)
levels(x)
is.vector(x)
x[2] <- "c"
x
c(x,factor("b))
""
c(x,factor("b"))
sex_char <- c("m","m","m")
ls
sex_factor <- factor(sex_char,levels = c("m","f"))
table (sex_char)
table (sex_factor)
install.packages("plantbreeding")
library(plantbreeding)
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("vapply")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x
x
x[1]
x[4]
x[1:4]
x[6]
x[0]
x[-2]
x[c(-1,-5)]
x[-c(1,5)]
x[1:3]
x[-1:3]
x[-(1:3)]
x2 <- x[-4]
x2
names(x)
x[c("a","c")]
x[-which(names(x) == "a")]
y <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(y) <- c('a', 'b', 'c', 'd', 'e')
print(y)
y
ls
x[-which(names(x) == "g")]
which(names(x) =="g")
which(names(x) =="a")
which(names(x) =="g")
x[-which(names(x) == "g")]
x>6
x > 6
install.packages("plantbreeding", repos="http://R-Forge.R-project.org")
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x[which(x>4 && <7)]
x[which(x>4 & <7)]
x[x>4 $ x<7)]
x[x>4 & x<7)]
x[c(x>4, x<7)]
x[which(x>4) & which(x<7)]
x[x>4 & x<7
]
x[x>4 & x<7]
x[x>4 & x<7)]
x[x>4 & x<7]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(df)
cats
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c1, 0, 1))
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats
sum(cats)
str(cats)
is.data.frame(cats)
cats$weight
cats$coat
cats$weight + 2
paste ("My cat is", cats$coat)
typeof(cats$weight)
cats[1]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(df)
ls
exit
stop
cats
cats[1]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats
function (x, df1, df2, ncp, log = FALSE)
)
cats[1]
cats[1]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats[1]
cats[[1]]
cats[[1:@]]
cats[[1:2]]
cats[[-1]]
cats[[1]]
cats[3,]
cats[3,1]
cats[3,]
cats[1,]
cats[1:2,]
cats[1:2,2:3]
cats[1:2,3]
age <- c(2,3,5,12)
cats
age <- c(2,3,5,12)
cats
cats cbind(cats,age)
cats <- cbind(cats,age)
age <- c(4,5,8
)
cats <- cbind(cats,age)
cats
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
levels(cats$coat)
levels(cats$coat)<- c(levels(cats($coat),"tortoiseshell"))
levels(cats$coat)<- c(levels(cats($coat),'tortoiseshell'))
levels(cats$coat) <- c(levels(cats($coat),'tortoiseshell'))
levels(cats$coat) <- c(levels(cats$coat),'tortoiseshell')
levels(cats$coat)
cats <- rbind(cats, newRow)
cats
na.omit(cats)
cats[-4]
cats[-4,]
cats <- na.omit(cats)
cats
append(cats,cats)
rbind(cats,cats)
rownames(cats)
setwd("~/Desktop")
library(readxl)
EMails <- read_excel("C:/Users/mdzievit.IASTATE/Desktop/EMails.xlsx")
View(EMails)
uniq(EMails$Class)
duplicated(EMails$Class)
unique(EMails$Class)
classes <- unique(EMails$Class)
i=1
emails[classes[i],1]
EMails[classes[i],1]
EMails[1,1]
EMails[which(emails==classes[i],1)
]
EMails[which(EMails$Class==classes[i],1)
]
EMails$Class==classes[i]
EMails[EMails$Class==classes[i],]
EMails[EMails$Class==classes[i],1]
emaillist
emailList <- null
emailList <- NULL
for (i in 1: length(classes)) {
IndEmail <- EMails[EMails$Class==classes[i],1]
email <- IndEmail[1]
for (j in 2: length(IndEmail)) {
email <- paste(email,IndEmail[j],sep=";")
}
emailList <- rbind(emailList, c(classes[i],email))
}
View(emailList)
write.xlsx (emailList,"EastEmails.xlsx")
write.table (emailList,"EastEmails.txt", sep="\t")
load("C:/Users/mdzievit.IASTATE/Box Sync/Desktop/F3_SNPs/B73/Less/datacleanup_step2.RData")
hapLength <- seq(from = 1, to = 20, by = 5)
hapSum <- matrix(nrow = length(hapLength),ncol = 10)
colnames(hapSum) = 1:10
rownames(hapSum) = hapLength
View(filteredData)
View(snpFiltMissChi)
test3 <- strsplit(rownames(snpFilt1),"_")
test3 <- strsplit(rownames(filteredData),"_")
test4 <- plyr::ldply(test3, rbind)
View(test4)
View(test4)
test3 <- strsplit(colnames(filteredData),"_")
test4 <- plyr::ldply(test3, rbind)
View(test4)
test4[-1,]
test4 <- test4[-1,]
View(test4)
test4$Chr <- as.numeric(as.character(snpFilt1$Chr))
test4$Chr <- as.numeric(as.character(test4$Chr))
test4$2 <- as.numeric(as.character(test4$2))
library(dplyr)
library(tidyr)
library(pcaMethods)
setwd("C:/Users/mdzievit.IASTATE/Dropbox/Classes/EEOB_546X/PEB_Power_Final_Project/Structure_Analysis/")
data <- read.delim("genetic_map_data_EXPIM2012_wh.txt",header = TRUE)
dim(data)
colnames(data)[1:5]
genotype <- read.delim("Table_S1.txt",header = TRUE, skip = 1)
colnames(genotype)
data_t <- t(data)
##Adding the columns and removing the 3 lines (markers, chr, cm)
colnames(data_t) <- data_t[1,]
data_t <- data_t[-(1:3),]
##Converting to dataframe
data_t <- as.data.frame(data_t)
##Adding the row names to the same column name as the genotype file
data_t$SolCAP.T.number <- rownames(data_t)
rownames(data_t) <- NULL
##Checking the levels of the market class
levels(genotype$Market.Class)
##Joining the market class info, filtering out hyrbids, dropping the market class, and transforming the table back to the original way
data_t_info <- genotype %>%
select(SolCAP.T.number, Market.Class) %>%
full_join(data_t, by = c("SolCAP.T.number")) %>%
filter(Market.Class != "Hybrid") %>%
select(everything(),-Market.Class)
##Making the first line the header and removing that line
data_filt_info <- t(data_t_info)
data_filt_info <- cbind(rownames(data_filt_info),data_filt_info)
rownames(data_filt_info) <- NULL
data_filt_info <- as.data.frame(data_filt_info)
colnames(data_filt_info) <- unlist(data_filt_info[1,])
data_filt_info <- data_filt_info[-1,]
##Checking the col names, need to rename the marker column name
colnames(data_filt_info)[1:3]
colnames(data)[1:3]
colnames(data_filt_info)[1] <- "SNP.markers"
tidy.data <- data_filt_info %>% gather(Genotype,SNP,-SNP.markers)
tidy.data.snps <- tidy.data %>% group_by(SNP.markers,SNP) %>%
summarize(n = n())
snpType <- unique(tidy.data.snps$SNP)
snpType
tidy.data.snps.conv <- tidy.data.snps %>% group_by(SNP.markers) %>%
mutate(SNP.Converted = ifelse(SNP == "--",SNP,
ifelse(SNP != "AA" & SNP != "CC" &
SNP != "GG" & SNP != "TT","1",SNP)))
tidy.data.snps.conv.htms <- tidy.data.snps.conv %>%
filter(SNP.Converted == "1" | SNP.Converted == "--" )
tidy.data.snps.conv.hom <- tidy.data.snps.conv %>% group_by(SNP.markers) %>%
filter(SNP.Converted != "--"  & SNP.Converted != "1") %>%
mutate(rank = dense_rank(desc(n))) %>%
mutate(SNP.Converted = ifelse(rank == 1, "2","0")) %>% select(-rank)
tidy.data.snps.all.conv <- tidy.data.snps.conv.hom %>%
full_join(tidy.data.snps.conv.htms,by =
c("SNP.markers","SNP","n","SNP.Converted")) %>%
mutate(SNP.Converted = ifelse(SNP.Converted == "--",NA,SNP.Converted))
tidy.data.snps.all.conv$SNP.Converted <-
as.integer(tidy.data.snps.all.conv$SNP.Converted)
data.conv <- tidy.data %>%
left_join(tidy.data.snps.all.conv,by = c("SNP.markers","SNP")) %>%
select(everything(),-SNP,-n)
rm(list = setdiff(ls(),"data.conv"))
head(data.conv,4)
View(data.conv)
install.packages("rtracklayer")
library(ggplot2)
library(tidyr)
library(dplyr)
library(gridExtra)
library(grid)
library(lattice)
###Import the full dataset PC information and import the sample_ID file with market class
setwd("C:/Users/mdzievit.IASTATE/Dropbox/Classes/EEOB_546X/PEB_Power_Final_Project/Structure_Analysis/Admixture_Results/")
subpop2 <- read.table("tomato_proc.2.Q")
subpop3 <- read.table("tomato_proc.3.Q")
subpop4 <- read.table("tomato_proc.4.Q")
sampID_proc <- read.table("tomato_sampID_proc_info.txt", sep = "\t",header = TRUE)
##Figure out max ancestry before joining files
colnames(subpop2)
colnames(subpop2) <- c("Pop1","Pop2")
colnames(subpop2)
subpop2$max <- apply(subpop2,1,max)
subpop2$Pop <- colnames(subpop2)[apply(subpop2,1,which.max)]
colnames(subpop3)
colnames(subpop3) <- c("Pop1","Pop2","Pop3")
colnames(subpop3)
subpop3$max <- apply(subpop3,1,max)
subpop3$Pop <- colnames(subpop3)[apply(subpop3,1,which.max)]
colnames(subpop4)
colnames(subpop4) <- c("Pop1","Pop2","Pop3","Pop4")
colnames(subpop4)
subpop4$max <- apply(subpop4,1,max)
subpop4$Pop <- colnames(subpop4)[apply(subpop4,1,which.max)]
##Need to import these PCA information
proc_PC <- read.table("Proc_PC.txt", sep = "\t")
##Combine files
subpop2.info <- cbind(sampID_proc,subpop2)
subpop3.info <- cbind(sampID_proc,subpop3)
subpop4.info <- cbind(sampID_proc,subpop4)
rm(subpop2,subpop3,subpop4)
##Determining if there is admixture and classifying it accordingly
subpop2.info <- subpop2.info %>% mutate(NewPop = ifelse(max >= .51,Pop,"Admix"))
subpop3.info <- subpop3.info %>% mutate(NewPop = ifelse(max >= .51,Pop,"Admix"))
subpop4.info <- subpop4.info %>% mutate(NewPop = ifelse(max >= .51,Pop,"Admix"))
##Creating 5 and 7 subpop PC plot to compare with original
full_PC.subpop2 <- subpop2.info %>%
select(SolCAP.T.number,NewPop) %>%
left_join(proc_PC,by = "SolCAP.T.number")
colors4 <- c("Blue","Red","Green")
shapes4 <- c(1,2,3)
colors5 <- c("Gold","Blue","Red")
shapes5 <- c(0,1,2)
origPC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop2) +
geom_point(aes(colour = Market.Class, shape = Market.Class),size = 3) +
scale_color_manual(values = colors4) +
scale_shape_manual(values = shapes4) +
theme_bw() +
theme(aspect.ratio = 1,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
labs(title = "Original processing figure, subpopulations assigned by breeders")
structure2_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop2) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors5) +
scale_shape_manual(values = shapes5) +
theme_bw() +
theme(aspect.ratio = 1,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 12)) +
labs(title = "Subpopulation colored according to Admixture (K=2)")
pdf("Proc_PC_Comp-Subpop2.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure2_PC_Plot,ncol = 2)
dev.off()
##############################
#subpop3 plot
full_PC.subpop3 <- subpop3.info %>%
select(SolCAP.T.number,NewPop) %>%
left_join(proc_PC,by = "SolCAP.T.number")
colors6 <- c("Gold","Blue","Green","Red")
shapes6 <- c(0,1,3,2)
structure3_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop3) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors6) +
scale_shape_manual(values = shapes6) +
theme_bw() +
theme(aspect.ratio = 1,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 12)) +
labs(title = "Subpopulation colored according to Admixture (K=3)")
pdf("Proc_PC_Comp-Subpop3.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure3_PC_Plot,ncol = 2)
dev.off()
##############################
#subpop4 plot
full_PC.subpop4 <- subpop4.info %>%
select(SolCAP.T.number,NewPop) %>%
left_join(proc_PC,by = "SolCAP.T.number")
colors7 <- c("Gold","Red","Green","Blue","Violet")
shapes7 <- c(0,2,3,1,4)
structure4_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop4) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors7) +
scale_shape_manual(values = shapes7) +
theme_bw() +
theme(aspect.ratio = 1,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 12)) +
labs(title = "Subpopulation colored according to Admixture (K=4)")
pdf("Proc_PC_Comp-Subpop4.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure4_PC_Plot,ncol = 2)
dev.off()
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2)
dev.off()
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5))
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5))
dev.off()
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5))
dev.off()
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
dev.off()
origPC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop2) +
geom_point(aes(colour = Market.Class, shape = Market.Class),size = 3) +
scale_color_manual(values = colors4) +
scale_shape_manual(values = shapes4) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
labs(title = "Original processing figure, subpopulations assigned by breeders")
structure2_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop2) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors5) +
scale_shape_manual(values = shapes5) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 12)) +
labs(title = "Subpopulation colored according to Admixture (K=2)")
structure3_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop3) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors6) +
scale_shape_manual(values = shapes6) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 12)) +
labs(title = "Subpopulation colored according to Admixture (K=3)")
structure4_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop4) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors7) +
scale_shape_manual(values = shapes7) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 12)) +
labs(title = "Subpopulation colored according to Admixture (K=4)")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
dev.off()
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot)
origPC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop2) +
geom_point(aes(colour = Market.Class, shape = Market.Class),size = 3) +
scale_color_manual(values = colors4) +
scale_shape_manual(values = shapes4) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
labs(title = "Original processing figure, subpopulations assigned by breeders")
structure2_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop2) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors5) +
scale_shape_manual(values = shapes5) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
labs(title = "Subpopulation colored according to Admixture (K=2)")
structure3_PC_Plot <- ggplot(aes(x = PC1, y = PC2),data = full_PC.subpop3) +
geom_point(aes(colour = NewPop, shape = NewPop),size = 3) +
scale_color_manual(values = colors6) +
scale_shape_manual(values = shapes6) +
theme_bw() +
theme(aspect.ratio = .75,legend.position = "bottom",plot.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
labs(title = "Subpopulation colored according to Admixture (K=3)")
grid.arrange(origPC_Plot,structure3_PC_Plot,ncol = 2)
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
dev.off()
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.25,.25,.25,.25), widths = c(.25,.25,.25,.25))
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.25,.25), widths = c(.25,.25))
pdf("All4_Proc.pdf")
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.25,.25), widths = c(.25,.25))
dev.off()
pdf("All4_Proc.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.25,.25), widths = c(.25,.25))
dev.off()
pdf("All4_Proc.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2,
heights = c(.5,.5), widths = c(.5,.5))
dev.off()
pdf("All4_Proc.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2)
dev.off()
pdf("All4_Proc.pdf",onefile = TRUE, paper = 'A4r', width = 11, height = 8)
grid.arrange(origPC_Plot,structure2_PC_Plot,structure3_PC_Plot,structure4_PC_Plot, ncol = 2)
dev.off()
