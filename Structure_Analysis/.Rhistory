counts <- vector( mode="numeric", length= length(gametes))
for (j in 1:length(gametes)) {
counts[j] <- length(which(bothLociGen[,i]==gametes[j]))
}
overallCounts <- rbind(overallCounts,(counts))
}
overallCounts <- t(overallCounts)
overallCounts <- NULL
for ( i in 1: ncol(bothLociGen)) {
counts <- vector( mode="numeric", length= length(gametes))
for (j in 1:length(gametes)) {
counts[j] <- length(which(bothLociGen[,i]==gametes[j]))
}
overallCounts <- rbind(overallCounts,(counts))
}
overallCounts <- t(overallCounts)
View(overallCounts)
gametes <-c(11,22,12,21)
gametes <-c(11,22,12,21)
i=1
j=1
counts <- vector( mode="numeric", length= 2)
counts[j] <- length(which(bothLociGen[,i]==gametes[j],bothLociGen[,i]==gametes[j+1]))
View(bothLociGen)
counts[j] <- length(which(bothLociGen[,i]==gametes[j])) + length(which(bothLociGen[i,] == gametes[j+1]))
length(which(bothLociGen[,i]==gametes[j]))
length(which(bothLociGen[i,] == gametes[j+1]))
View(bothLociGen)
View(bothLociGen)
gamets[j+1]
gametes[j+1]
bothLociGen[i,]
counts[j] <- length(which(bothLociGen[,i]==gametes[j])) + length(which(bothLociGen[,1] == gametes[j+1]))
j=2
counts [j+1] <- length(which(bothLociGen[,i]==gametes[j])) + length(which(bothLociGen[,1] == gametes[j+1]))
counts <- vector( mode="numeric", length= 2)
counts[1] <- length(which(bothLociGen[,i]==gametes[1])) + length(which(bothLociGen[,i] == gametes[2]))
counts [2] <- length(which(bothLociGen[,i]==gametes[3])) + length(which(bothLociGen[,i] == gametes[4]))
overallCounts <- NULL
overallCounts <- rbind(overallCounts,(counts))
overallCounts <- NULL
for ( i in 1: ncol(bothLociGen)) {
counts <- vector( mode="numeric", length= 2)
counts[1] <- length(which(bothLociGen[,i]==gametes[1])) + length(which(bothLociGen[,i] == gametes[2]))
counts [2] <- length(which(bothLociGen[,i]==gametes[3])) + length(which(bothLociGen[,i] == gametes[4]))
overallCounts <- rbind(overallCounts,(counts))
}
View(overallCounts)
overallCounts <- t(overallCounts)
View(overallCounts)
prop.table(overallCounts)
prop.table(overallCounts,2)
recombFreq <- prop.table(overallCounts,2)[2,]
recombFreq <- as.matrix(prop.table(overallCounts,2)[2,])
View(recombFreq)
recombFreq <- t(as.matrix(prop.table(overallCounts,2)[2,]))
View(recombFreq)
markers <- matrix(c(0,0,2,1,1,0,0,1,0,1,0,0),nrow=3,ncol=4)
markers <- markers-1
View(markers)
markers <- matrix(c(0,0,2,1,1,0,0,1,0,1,0,0),nrow=3,ncol=4)
View(markers)
markers <- markers-1
View(markers)
mMatrix <- markers
markers <- as.data.frame(markers)
markers[] <- lapply(markers,factor)
markersFactors <- sapply(markers,levels)
View(markersFactors)
markersCount <- apply(markers,2,table)
View(markersCount)
markersMean <- apply(markersCount,2,FUN=sum)
markersFreq <- markersCount/markersMean
markersMAF <- (matrix((apply(markersFreq, 2,FUN=min))))
markersMAF <- t(matrix(sapply(markersMAF, function(x) {2*(x-0.5)})))
pMatrix <- apply(markersMAF,2, rep,dim(markers)[1])
markersMAF <- t(matrix(c(.383,.244,.167,.067)))
sumP <- sum(sapply(markersMAF, function(x) {x * (1-x)}))
sumP <- sum(sapply(markersMAF, function(x) {x * (1-x)}))
pMatrix <- t(matrix(sapply(markersMAF, function(x) {2*(x-0.5)})))
pMatrix <- apply(pMatrix,2, rep,dim(markers)[1])
zMatrix <-mMatrix - pMatrix
gMatrix <- ( zMatrix %*% t(zMatrix))/ sumP
View(gMatrix)
install.packages("ProjectTemplate")
library(ProjectTemplate)
create.project("..my_project", merge.strategy = "allow.non.conflict")
create.project("../my_project", merge.strategy = "allow.non.conflict")
a <- c("a",1)
b <- c(TRUE,1)
c <- c(1L,10)
d <- c(a,b,c)
typeof(a)
typeof(a,b,c,d)
typeof(a)
typeof(b)
typeof(c)
typeof(d)
mt cars
mtcars
data <-mtcars
View(data)
max(data$MPG)
max(data)
x <- list (1:3,"a",c(TRUE,FALSE,TRUE),c(2.3,5.9))
x
x[[1]][1]
x[[1]][2
x[[1]][2]
x[[1]][2]
x[[2]][2]
x[[2]][1]
download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
data <- download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
data <- download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
x <- list (1:3,"a",c(TRUE,FALSE,TRUE),c(2.3,5.9))
str(x)
dim(x)
is.recursive(x)
x <- mtcars
is.list(mtcars)
help("datasets")
library(help="datasets")
mod <- lm(mpg ~ wt, data=x)
mod
is.list(mod)
x <- c("a","b","b","a")
x
typeof(x)
x <- factor(x)
typeof(x)
levels(x)
is.vector(x)
x[2] <- "c"
x
c(x,factor("b))
""
c(x,factor("b"))
sex_char <- c("m","m","m")
ls
sex_factor <- factor(sex_char,levels = c("m","f"))
table (sex_char)
table (sex_factor)
install.packages("plantbreeding")
library(plantbreeding)
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("vapply")
install.packages("plantbreeding")
install.packages("plantbreeding")
install.packages("plantbreeding")
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x
x
x[1]
x[4]
x[1:4]
x[6]
x[0]
x[-2]
x[c(-1,-5)]
x[-c(1,5)]
x[1:3]
x[-1:3]
x[-(1:3)]
x2 <- x[-4]
x2
names(x)
x[c("a","c")]
x[-which(names(x) == "a")]
y <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(y) <- c('a', 'b', 'c', 'd', 'e')
print(y)
y
ls
x[-which(names(x) == "g")]
which(names(x) =="g")
which(names(x) =="a")
which(names(x) =="g")
x[-which(names(x) == "g")]
x>6
x > 6
install.packages("plantbreeding", repos="http://R-Forge.R-project.org")
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x[which(x>4 && <7)]
x[which(x>4 & <7)]
x[x>4 $ x<7)]
x[x>4 & x<7)]
x[c(x>4, x<7)]
x[which(x>4) & which(x<7)]
x[x>4 & x<7
]
x[x>4 & x<7]
x[x>4 & x<7)]
x[x>4 & x<7]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(df)
cats
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c1, 0, 1))
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats
sum(cats)
str(cats)
is.data.frame(cats)
cats$weight
cats$coat
cats$weight + 2
paste ("My cat is", cats$coat)
typeof(cats$weight)
cats[1]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(df)
ls
exit
stop
cats
cats[1]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats
function (x, df1, df2, ncp, log = FALSE)
)
cats[1]
cats[1]
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
cats[1]
cats[[1]]
cats[[1:@]]
cats[[1:2]]
cats[[-1]]
cats[[1]]
cats[3,]
cats[3,1]
cats[3,]
cats[1,]
cats[1:2,]
cats[1:2,2:3]
cats[1:2,3]
age <- c(2,3,5,12)
cats
age <- c(2,3,5,12)
cats
cats cbind(cats,age)
cats <- cbind(cats,age)
age <- c(4,5,8
)
cats <- cbind(cats,age)
cats
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
levels(cats$coat)
levels(cats$coat)<- c(levels(cats($coat),"tortoiseshell"))
levels(cats$coat)<- c(levels(cats($coat),'tortoiseshell'))
levels(cats$coat) <- c(levels(cats($coat),'tortoiseshell'))
levels(cats$coat) <- c(levels(cats$coat),'tortoiseshell')
levels(cats$coat)
cats <- rbind(cats, newRow)
cats
na.omit(cats)
cats[-4]
cats[-4,]
cats <- na.omit(cats)
cats
append(cats,cats)
rbind(cats,cats)
rownames(cats)
setwd("~/Desktop")
library(readxl)
EMails <- read_excel("C:/Users/mdzievit.IASTATE/Desktop/EMails.xlsx")
View(EMails)
uniq(EMails$Class)
duplicated(EMails$Class)
unique(EMails$Class)
classes <- unique(EMails$Class)
i=1
emails[classes[i],1]
EMails[classes[i],1]
EMails[1,1]
EMails[which(emails==classes[i],1)
]
EMails[which(EMails$Class==classes[i],1)
]
EMails$Class==classes[i]
EMails[EMails$Class==classes[i],]
EMails[EMails$Class==classes[i],1]
emaillist
emailList <- null
emailList <- NULL
for (i in 1: length(classes)) {
IndEmail <- EMails[EMails$Class==classes[i],1]
email <- IndEmail[1]
for (j in 2: length(IndEmail)) {
email <- paste(email,IndEmail[j],sep=";")
}
emailList <- rbind(emailList, c(classes[i],email))
}
View(emailList)
write.xlsx (emailList,"EastEmails.xlsx")
write.table (emailList,"EastEmails.txt", sep="\t")
load("C:/Users/mdzievit.IASTATE/Box Sync/Desktop/F3_SNPs/B73/Less/datacleanup_step2.RData")
hapLength <- seq(from = 1, to = 20, by = 5)
hapSum <- matrix(nrow = length(hapLength),ncol = 10)
colnames(hapSum) = 1:10
rownames(hapSum) = hapLength
View(filteredData)
View(snpFiltMissChi)
test3 <- strsplit(rownames(snpFilt1),"_")
test3 <- strsplit(rownames(filteredData),"_")
test4 <- plyr::ldply(test3, rbind)
View(test4)
View(test4)
test3 <- strsplit(colnames(filteredData),"_")
test4 <- plyr::ldply(test3, rbind)
View(test4)
test4[-1,]
test4 <- test4[-1,]
View(test4)
test4$Chr <- as.numeric(as.character(snpFilt1$Chr))
test4$Chr <- as.numeric(as.character(test4$Chr))
test4$2 <- as.numeric(as.character(test4$2))
library(dplyr)
library(tidyr)
library(pcaMethods)
setwd("C:/Users/mdzievit.IASTATE/Dropbox/Classes/EEOB_546X/PEB_Power_Final_Project/Structure_Analysis/")
data <- read.delim("genetic_map_data_EXPIM2012_wh.txt",header = TRUE)
dim(data)
colnames(data)[1:5]
genotype <- read.delim("Table_S1.txt",header = TRUE, skip = 1)
colnames(genotype)
data_t <- t(data)
##Adding the columns and removing the 3 lines (markers, chr, cm)
colnames(data_t) <- data_t[1,]
data_t <- data_t[-(1:3),]
##Converting to dataframe
data_t <- as.data.frame(data_t)
##Adding the row names to the same column name as the genotype file
data_t$SolCAP.T.number <- rownames(data_t)
rownames(data_t) <- NULL
##Checking the levels of the market class
levels(genotype$Market.Class)
##Joining the market class info, filtering out hyrbids, dropping the market class, and transforming the table back to the original way
data_t_info <- genotype %>%
select(SolCAP.T.number, Market.Class) %>%
full_join(data_t, by = c("SolCAP.T.number")) %>%
filter(Market.Class != "Hybrid") %>%
select(everything(),-Market.Class)
##Making the first line the header and removing that line
data_filt_info <- t(data_t_info)
data_filt_info <- cbind(rownames(data_filt_info),data_filt_info)
rownames(data_filt_info) <- NULL
data_filt_info <- as.data.frame(data_filt_info)
colnames(data_filt_info) <- unlist(data_filt_info[1,])
data_filt_info <- data_filt_info[-1,]
##Checking the col names, need to rename the marker column name
colnames(data_filt_info)[1:3]
colnames(data)[1:3]
colnames(data_filt_info)[1] <- "SNP.markers"
tidy.data <- data_filt_info %>% gather(Genotype,SNP,-SNP.markers)
tidy.data.snps <- tidy.data %>% group_by(SNP.markers,SNP) %>%
summarize(n = n())
snpType <- unique(tidy.data.snps$SNP)
snpType
tidy.data.snps.conv <- tidy.data.snps %>% group_by(SNP.markers) %>%
mutate(SNP.Converted = ifelse(SNP == "--",SNP,
ifelse(SNP != "AA" & SNP != "CC" &
SNP != "GG" & SNP != "TT","1",SNP)))
tidy.data.snps.conv.htms <- tidy.data.snps.conv %>%
filter(SNP.Converted == "1" | SNP.Converted == "--" )
tidy.data.snps.conv.hom <- tidy.data.snps.conv %>% group_by(SNP.markers) %>%
filter(SNP.Converted != "--"  & SNP.Converted != "1") %>%
mutate(rank = dense_rank(desc(n))) %>%
mutate(SNP.Converted = ifelse(rank == 1, "2","0")) %>% select(-rank)
tidy.data.snps.all.conv <- tidy.data.snps.conv.hom %>%
full_join(tidy.data.snps.conv.htms,by =
c("SNP.markers","SNP","n","SNP.Converted")) %>%
mutate(SNP.Converted = ifelse(SNP.Converted == "--",NA,SNP.Converted))
tidy.data.snps.all.conv$SNP.Converted <-
as.integer(tidy.data.snps.all.conv$SNP.Converted)
data.conv <- tidy.data %>%
left_join(tidy.data.snps.all.conv,by = c("SNP.markers","SNP")) %>%
select(everything(),-SNP,-n)
rm(list = setdiff(ls(),"data.conv"))
head(data.conv,4)
View(data.conv)
install.packages("rtracklayer")
setwd("C:/Users/mdzievit.IASTATE/Dropbox/Classes/EEOB_546X/PEB_Power_Final_Project/Structure_Analysis/")
data <- read.delim("genetic_map_data_EXPIM2012_wh.txt",header = TRUE)
dim(data)
colnames(data)[1:5]
colnames(data)[1:5]
dim(data)
###Loads the necessary libraries
library(adegenet)
library(tidyr)
library(dplyr)
##Setting wd and loading the SNP data file
setwd("C:/Users/mdzievit.IASTATE/Dropbox/Classes/EEOB_546X/PEB_Power_Final_Project/Structure_Analysis/")
data <- read.delim("genetic_map_data_EXPIM2012_wh.txt",header = TRUE)
##Checking the size of the data and column names to make sure it is the right file
dim(data)
colnames(data)[1:5]
#Transform the data. Data is markers by genotype, want it to be genotype by marker
data_t <- t(data)
dim(data_t)
##Setting wd and loading the SNP data file
setwd("C:/Users/mdzievit.IASTATE/Dropbox/Classes/EEOB_546X/PEB_Power_Final_Project/Structure_Analysis/")
data <- read.delim("genetic_map_data_EXPIM2012_wh.txt",header = TRUE)
##Checking the size of the data and column names to make sure it is the right file
dim(data)
colnames(data)[1:5]
#Transform the data. Data is markers by genotype, want it to be genotype by marker
data_t <- t(data)
dim(data_t)
##Loading and inspecting the genotype file
genotype <- read.delim("Table_S1.txt",header = TRUE, skip = 1)
colnames(genotype)
##Reducing the file to the information I need. Genotype name and sub-pop classification
genotype <- genotype %>% select(SolCAP.T.number,Market.Class)
##Identified incorrect classifications in the genotype file related to the original PCA figure. Need to correct these to make the right plot. Fresh market/Processing is one that was changed after. Vintage/processing were ones that were changed after analysis. I am changing these to their correct classification to remove the type. It causes problems down stream.
levels(genotype$Market.Class)
genotype[genotype == "Fresh market/Processing"] <- "Processing"
genotype[genotype == "Vintage/Processing"] <- "Processing"
genotype <- droplevels(genotype)
levels(genotype$Market.Class)
##Adding the columns and removing the 3 lines (markers, chr, cm)
colnames(data_t) <- data_t[1,]
data_t <- data_t[-(1:3),]
##Converting to dataframe
data_t <- as.data.frame(data_t)
##Adding the row names to the same column name as the genotype file
data_t$SolCAP.T.number <- rownames(data_t)
rownames(data_t) <- NULL
##Checking the levels of the market class
levels(genotype$Market.Class)
##Joining the market class info, filtering out hyrbids, dropping the market class, and transforming the table back to the original way
data_t_info <- genotype %>%
select(SolCAP.T.number, Market.Class) %>%
full_join(data_t, by = c("SolCAP.T.number")) %>%
filter(Market.Class != "Hybrid") %>%
select(everything(),-Market.Class)
##Subsetting the snp file for the processing part of the analysis
data_t_info.proc <- genotype %>%
select(SolCAP.T.number, Market.Class) %>%
full_join(data_t, by = c("SolCAP.T.number")) %>%
filter(Market.Class != "Hybrid" &
Market.Class == "Fresh market" |
Market.Class == "Processing" |
Market.Class == "Vintage") %>%
select(everything(),-Market.Class)
##Making the first line the header and removing that line
data_filt_info <- t(data_t_info)
data_filt_info <- cbind(rownames(data_filt_info),data_filt_info)
rownames(data_filt_info) <- NULL
data_filt_info <- as.data.frame(data_filt_info)
colnames(data_filt_info) <- unlist(data_filt_info[1,])
data_filt_info <- data_filt_info[-1,]
##Checking the col names, need to rename the marker column name
colnames(data_filt_info)[1:3]
colnames(data)[1:3]
colnames(data_filt_info)[1] <- "SNP.markers"
data.filt.info.pos <- data %>%
select(SNP.markers,Chromosome,Position..cM.) %>%
right_join(data_filt_info,by = ("SNP.markers"))
data.filt.info.pos <- data.filt.info.pos %>% arrange(Chromosome,Position..cM.)
data.mat <- t(as.matrix(data.filt.info.pos))
data.mat <- data.mat[-(1:3),]
data.mat <- as.data.frame(data.mat)
View(data.mat)
data.mat <- t(as.matrix(data.filt.info.pos))
View(data.mat)
View(data.mat)
data.mat <- t(as.matrix(data.filt.info.pos))
colnames(data.mat) <- data.mat[1,]
data.mat <- t(as.matrix(data.filt.info.pos))
colnames(data.mat) <- data.mat[1,]
data.mat <- data.mat[-(1:3),]
data.mat <- as.data.frame(data.mat)
data.mat.alleles <- df2genind(data.mat, ploidy = 2, sep = "")
data.mat.alleles <- df2genind(data.mat, ploidy = 2, sep = "")
data.mat.alleles <- genind2df(data.mat.alleles, oneColPerAll = TRUE)
data.mat.alleles[data.mat.alleles == "-"] <- 0
data.mat.alleles[data.mat.alleles == "-"] <- 0
data.mat.alleles <- as.matrix(data.mat.alleles)
data.mat.alleles <- as.matrix(data.mat.alleles)
rownames(data.mat.alleles) <- NULL
names <- colnames(data.mat)
names <- cbind(1:length(names),names)
names <- rbind(names,names)
names <- as.data.frame(names)
names <- names[sort(names$V1),]
colnames(data.mat.alleles) <- names$names
View(data)
data.snps.orig <- data[1:3] %>% select(everything(),names = SNP.markers) %>%
mutate(BP = 0) %>%
arrange(Chromosome,Position..cM.) %>%
select(Chromosome,names,Position..cM., BP)
data.snps <- data.snps.orig %>%
mutate(BP = 1:dim(data.snps.orig)[1], Position..cM. = 0,
names = 1:dim(data.snps.orig)[1]) %>%
select(Chromosome,names,Position..cM., BP)
View(data.snps)
View(data.snps.orig)
View(data.snps)
